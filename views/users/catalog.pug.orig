<<<<<<< HEAD
extends adminBase.pug

block content
  
  head
  link(rel='stylesheet' href='/css_styles/catalog_styles.css' type='text/css' media='screen' charset='utf-8')

  .container(id='catalogContent')
    p
      label(for='new-book') Add Book
      input#new-book(type='text')
      button Add
    h3 Books
    ul#booksList
      li
        label Harry Potter
        input(type='text')
        button.edit Edit
        button.delete Delete
    script.
      var bookInput = document.getElementById("new-book"); // new-book
      var addButton = document.getElementsByTagName("button")[0];//first button
      var booksHolder = document.getElementById("booksList"); //booksList
      //New Book List item
      var createNewBookElement = function(bookString) {
      // create List Item
      var listItem = document.createElement("li");
      // label
      var label = document.createElement("label");
      // input (text)
      var editInput = document.createElement("input");
      // button.edit
      var editButton = document.createElement("button");
      // button.delete
      var deleteButton = document.createElement("button");
      //Each element needs modified
      editInput.type = "text";
      editButton.innerText = "Edit";
      editButton.className = "edit";
      deleteButton.innerText = "Delete";
      deleteButton.className = "delete";
      label.innerText = bookString;
      // Each element needs appending
      listItem.appendChild(label);
      listItem.appendChild(editInput);
      listItem.appendChild(editButton);
      listItem.appendChild(deleteButton);
      return listItem;
      }
      //Add a new book
      var addBook = function() {
      console.log("Adding Book");
      //Create a new list item with the text from the #new-book:
      var listItem = createNewBookElement(bookInput.value);
      //Append listItem to BookHolder
      booksHolder.appendChild(listItem);
      bindBookEvents(listItem, bookCompleted);
      bookInput.value = "";
      }
      //Edit an existing book
      var editBook = function() {
      console.log("Edit Book...");
      var listItem = this.parentNode;
      var editInput = listItem.querySelector("input[type=text]");
      var label = listItem.querySelector("label");
      var containsClass = listItem.classList.contains("editMode");

      // if class of the parent is .editMode
      if (containsClass) {
      //Switch from .editMode
      //label text become the input's value
      label.innerText = editInput.value;
      } else {
      //Switch to .editMode
      //input value becomes the labels text
      editInput.value = label.innerText;
      }
      //Toggle .editMode on the parent
      listItem.classList.toggle("editMode");
      }
      //Delete an existing book
      var deleteBook = function () {
      console.log("Delete Book...");
      //Remove the parent list item from the ul
      var listItem = this.parentNode;
      var ul = listItem.parentNode;
      ul.removeChild(listItem);
      }
      //Mark a book as complete
      var bookCompleted = function() {
      console.log("Book Complete...");
      var listItem = this.parentNode;
      completedBooksHolder.appendChild(listItem);
      bindBookEvents(listItem, bookIncomplete);
      }
      //Mark a book as incomplete
      var bookIncomplete = function() {
      console.log("Book Incomplete...");
      var listItem = this.parentNode;
      booksHolder.appendChild(listItem);
      bindBookEvents(listItem, bookCompleted);
      }
      //Set the click handler to the addBook function
      addButton.addEventListener("click", addBook);
      var bindBookEvents = function(bookListItem, checkBoxEventHandler) {
      console.log("Bind List item events");
      // select listitems chidlren
      var checkBox = bookListItem.querySelector('input[type="checkbox"]');
      var editButton = bookListItem.querySelector("button.edit");
      var deleteButton = bookListItem.querySelector("button.delete");
      //bind editBook to edit button
      editButton.onclick = editBook;
      //bind deleteBook to delete button
      deleteButton.onclick = deleteBook;
      }
      //cycle over incompleteBookHolder ul list items
      for (var i = 0; i < booksHolder.children.length; i ++) {
      //bind events to list item's children (bookCompleted)
      bindBookEvents(booksHolder.children[i], bookCompleted);
      }
=======
doctype html
html(lang="en")
  head
    title FreeForFree - Library Management
    meta(charset='utf-8')
    meta(name="viewport", content="width=device-width, initial-scale=1")
    link(rel="stylesheet", href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css")
    link(rel='stylesheet' href='/css_styles/catalog_styles.css' type='text/css' media='screen' charset='utf-8')
  body
    .navbar.navbar-default
      .container
        .navbar-header
          .navbar-brand FreeForFree

        ul.nav.navbar-nav
          li
            a(href="/users/admin/list") Active Users
          li
            a(href="/users/admin/catalog") Catalog
            ul.nav.navbar-nav
              li
                a(href="/users/admin/books") Books
              li 
                a(href="/users/admin/magazines") Magazines
              li
                a(href="/users/admin/movies") Movies
              li 
                a(href="/users/admin/music") Music
          li 
            a(href="/users/admin/formBook") Add Book
          li 
            a(href="/users/admin/formMagazine") Add Magazine
          li 
            a(href="/users/admin/formMovie") Add Movie
          li 
            a(href="/users/admin/formMusic") Add Music
        p.navbar-text.navbar-right
          if profile
            span #{profile.displayName} &nbsp;
              a(href=logout) (logout)

    .container
>>>>>>> PerCatalog
